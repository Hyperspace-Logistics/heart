package modules

import (
	"encoding/base64"
	"fmt"

	"github.com/aarzilli/golua/lua"
)

// LoadJSON module
func LoadJSON(state *lua.State) error {
	// I made this module base64 because it had a lot of characters that were escaping the string
	// Source: https://github.com/rxi/json.lua
	jsonLua, err := base64.RawStdEncoding.DecodeString("")
	if err != nil {
		return fmt.Errorf("failed to load json module: %s", err)
	}

	return state.DoString(fmt.Sprintf("package.preload['heart.v1.json'] = function() %s end", string(jsonLua)))
}
